name: Ruby + Postgres

on:
  push:
    paths:
    - '.github/workflows/ruby-postgres.yml'
    - 'postgres.rb'
    - 'Gemfile*'

jobs:
  container-job-container-db:
    runs-on: ubuntu-latest

    # runs all of the steps inside the specified container rather than on the VM host.
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image:  ruby:2.6.5

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    continue-on-error: true
    steps:
    - uses: actions/checkout@v2
    - run: |
        bundle config path vendor/bundle
        bundle install
    - run: bundle exec ruby postgres.rb
      env:
        # use postgres for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        POSTGRES_HOST: postgres
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

  vm-job-container-db:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432 # 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - run: bundle exec ruby postgres.rb
      env:
        # use postgres for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        POSTGRES_HOST: localhost
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

  vm-job-vm-db:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - name: Setup postgres
      run: |
        sudo systemctl start postgresql.service
        sudo -u postgres createuser --createdb ${USER}
        sudo -u postgres psql -d template1 -c 'CREATE EXTENSION IF NOT EXISTS "hstore";'
        createdb ${USER}
    - run: bundle exec ruby postgres.rb
      env:
        # use "local socket"
        POSTGRES_URL: "postgres:///${{ env.USER }}"

  vm-job-vm-db-tcp:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - name: Setup postgres
      run: |
        sudo cat /etc/postgresql/*/main/pg_hba.conf
        sudo sed -i s/md5/trust/g /etc/postgresql/*/main/pg_hba.conf
        sudo systemctl start postgresql.service
        sudo -u postgres createuser --createdb --superuser ${USER}
        sudo -u postgres psql -d template1 -c 'CREATE EXTENSION IF NOT EXISTS "hstore";'
        createdb mytestdb
    - run: bundle exec ruby postgres.rb
      env:
        POSTGRES_URL: "postgres://localhost/mytestdb"

  vm-job-vm-db-action:
    runs-on: ubuntu-latest
    steps:
    - uses: dentarg/postgres@main
    - uses: actions/checkout@v2
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - run: bundle exec ruby postgres.rb
